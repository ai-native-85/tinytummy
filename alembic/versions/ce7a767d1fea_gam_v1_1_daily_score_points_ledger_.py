"""gam v1.1: daily_score, points_ledger, streak tables

Revision ID: ce7a767d1fea
Revises: 
Create Date: 2025-08-08 21:43:06.057568

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa

# revision identifiers, used by Alembic.
revision: str = 'ce7a767d1fea'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # Create extensions needed for UUID defaults
    op.execute('CREATE EXTENSION IF NOT EXISTS "uuid-ossp";')

    # gam_daily_score
    op.execute(
        """
        CREATE TABLE IF NOT EXISTS gam_daily_score (
          id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
          user_id uuid NOT NULL REFERENCES users(id) ON DELETE CASCADE,
          child_id uuid NOT NULL REFERENCES children(id) ON DELETE CASCADE,
          date date NOT NULL,
          score integer NOT NULL DEFAULT 0,
          components_json jsonb,
          updated_at timestamptz DEFAULT now()
        );
        """
    )
    op.execute("CREATE UNIQUE INDEX IF NOT EXISTS uq_gam_daily_score_ucd ON gam_daily_score(user_id, child_id, date);")

    # gam_points_ledger
    op.execute(
        """
        CREATE TABLE IF NOT EXISTS gam_points_ledger (
          id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
          user_id uuid NOT NULL REFERENCES users(id) ON DELETE CASCADE,
          child_id uuid NOT NULL REFERENCES children(id) ON DELETE CASCADE,
          date date NOT NULL,
          points integer NOT NULL DEFAULT 0,
          reason varchar(64) NOT NULL,
          created_at timestamptz DEFAULT now()
        );
        """
    )
    op.execute("CREATE UNIQUE INDEX IF NOT EXISTS uq_gam_points_ledger_ucdr ON gam_points_ledger(user_id, child_id, date, reason);")
    op.execute("CREATE INDEX IF NOT EXISTS ix_gam_points_ledger_ucd ON gam_points_ledger(user_id, child_id, date);")

    # gam_streak
    op.execute(
        """
        CREATE TABLE IF NOT EXISTS gam_streak (
          id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
          user_id uuid NOT NULL REFERENCES users(id) ON DELETE CASCADE,
          child_id uuid NOT NULL REFERENCES children(id) ON DELETE CASCADE,
          current_length integer NOT NULL DEFAULT 0,
          best_length integer NOT NULL DEFAULT 0,
          last_active_date date NULL,
          updated_at timestamptz DEFAULT now(),
          UNIQUE(user_id, child_id)
        );
        """
    )
    op.execute("CREATE INDEX IF NOT EXISTS ix_gam_streak_uc ON gam_streak(user_id, child_id);")


def downgrade() -> None:
    # Leave tables in place; no destructive downgrade for prod safety
    pass


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table_comment(
        'users',
        'User accounts with subscription tiers',
        existing_comment=None,
        schema=None
    )
    op.alter_column('users', 'subscription_tier',
               existing_type=postgresql.ENUM('free', 'premium', name='subscription_tier'),
               nullable=True,
               existing_server_default=sa.text("'free'::subscription_tier"))
    op.create_unique_constraint('user_badges_user_id_badge_id_key', 'user_badges', ['user_id', 'badge_id'])
    op.create_table_comment(
        'reports',
        'Pediatrician PDF reports (premium)',
        existing_comment=None,
        schema=None
    )
    op.create_index('idx_reports_user_id', 'reports', ['user_id'], unique=False)
    op.create_index('idx_reports_report_data_gin', 'reports', ['report_data'], unique=False, postgresql_using='gin')
    op.create_index('idx_reports_child_id', 'reports', ['child_id'], unique=False)
    op.alter_column('reports', 'recommendations',
               existing_type=postgresql.ARRAY(sa.String()),
               type_=postgresql.ARRAY(sa.TEXT()),
               existing_nullable=True)
    op.alter_column('reports', 'insights',
               existing_type=postgresql.ARRAY(sa.String()),
               type_=postgresql.ARRAY(sa.TEXT()),
               existing_nullable=True)
    op.alter_column('reports', 'report_type',
               existing_type=sa.Enum('WEEKLY', 'MONTHLY', 'CUSTOM', name='reporttype'),
               type_=postgresql.ENUM('weekly', 'monthly', 'custom', name='report_type'),
               existing_nullable=False)
    op.create_table_comment(
        'plans',
        'AI-generated 21-day meal plans (premium)',
        existing_comment=None,
        schema=None
    )
    op.create_index('idx_plans_user_id', 'plans', ['user_id'], unique=False)
    op.create_index('idx_plans_plan_data_gin', 'plans', ['plan_data'], unique=False, postgresql_using='gin')
    op.create_index('idx_plans_child_id', 'plans', ['child_id'], unique=False)
    op.create_table_comment(
        'offline_sync',
        'Offline data synchronization',
        existing_comment=None,
        schema=None
    )
    op.create_foreign_key('offline_sync_user_id_fkey', 'offline_sync', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.add_column('nutrition_guidelines', sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True))
    op.create_table_comment(
        'nutrition_guidelines',
        'Vector embeddings for RAG in chat assistant',
        existing_comment=None,
        schema=None
    )
    op.create_index('idx_nutrition_guidelines_type_region', 'nutrition_guidelines', ['guideline_type', 'region'], unique=False)
    op.create_index('idx_nutrition_guidelines_type', 'nutrition_guidelines', ['guideline_type'], unique=False)
    op.create_index('idx_nutrition_guidelines_title_gin', 'nutrition_guidelines', [sa.text("to_tsvector('english'::regconfig, title::text)")], unique=False, postgresql_using='gin')
    op.create_index('idx_nutrition_guidelines_text_gin', 'nutrition_guidelines', [sa.text("to_tsvector('english'::regconfig, guideline_text)")], unique=False, postgresql_using='gin')
    op.create_index('idx_nutrition_guidelines_region_age', 'nutrition_guidelines', ['region', 'age_min_months', 'age_max_months'], unique=False)
    op.create_index('idx_nutrition_guidelines_region', 'nutrition_guidelines', ['region'], unique=False)
    op.create_index('idx_nutrition_guidelines_metadata_gin', 'nutrition_guidelines', ['metadata'], unique=False, postgresql_using='gin')
    op.create_index('idx_nutrition_guidelines_language', 'nutrition_guidelines', ['language'], unique=False)
    op.create_index('idx_nutrition_guidelines_age', 'nutrition_guidelines', ['age_min_months', 'age_max_months'], unique=False)
    op.create_index('idx_nutrition_guidelines_active', 'nutrition_guidelines', ['is_active'], unique=False)
    op.alter_column('nutrition_guidelines', 'guideline_type',
               existing_type=sa.Enum('GROWTH', 'NUTRITION', 'DEVELOPMENT', 'FEEDING', 'ALLERGIES', name='guidelinetype'),
               type_=postgresql.ENUM('growth', 'nutrition', 'development', 'feeding', 'allergies', name='guideline_type'),
               existing_nullable=False)
    op.alter_column('nutrition_guidelines', 'guideline_text',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_column('nutrition_guidelines', 'guideline_metadata')
    op.create_table_comment(
        'meals',
        'Meal logs with GPT-4 nutrition analysis',
        existing_comment=None,
        schema=None
    )
    op.create_index('idx_meals_user_id', 'meals', ['user_id'], unique=False)
    op.create_index('idx_meals_user_date', 'meals', ['user_id', 'meal_date'], unique=False)
    op.create_index('idx_meals_meal_type', 'meals', ['meal_type'], unique=False)
    op.create_index('idx_meals_meal_time', 'meals', ['meal_time'], unique=False)
    op.create_index('idx_meals_meal_date', 'meals', ['meal_date'], unique=False)
    op.create_index('idx_meals_logged_at', 'meals', ['logged_at'], unique=False)
    op.create_index('idx_meals_input_method', 'meals', ['input_method'], unique=False)
    op.create_index('idx_meals_gpt_analysis_gin', 'meals', ['gpt_analysis'], unique=False, postgresql_using='gin')
    op.create_index('idx_meals_food_items_gin', 'meals', ['food_items'], unique=False, postgresql_using='gin')
    op.create_index('idx_meals_child_id', 'meals', ['child_id'], unique=False)
    op.create_index('idx_meals_child_date', 'meals', ['child_id', 'meal_date'], unique=False)
    op.alter_column('meals', 'estimated_quantity',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('meals', 'food_items',
               existing_type=postgresql.ARRAY(sa.String()),
               type_=postgresql.ARRAY(sa.TEXT()),
               existing_nullable=False)
    op.alter_column('meals', 'input_method',
               existing_type=sa.String(length=32),
               type_=postgresql.ENUM('text', 'voice', 'image', name='input_method'),
               existing_nullable=False)
    op.alter_column('meals', 'meal_type',
               existing_type=sa.String(length=32),
               type_=postgresql.ENUM('breakfast', 'lunch', 'dinner', 'snack', name='meal_type'),
               existing_nullable=False)
    op.create_table_comment(
        'gamification',
        'User points, streaks, and badges',
        existing_comment=None,
        schema=None
    )
    op.create_index('idx_gamification_user_id', 'gamification', ['user_id'], unique=False)
    op.create_index('idx_gamification_badges_gin', 'gamification', ['badges'], unique=False, postgresql_using='gin')
    op.drop_constraint('uq_gam_streak_uc', 'gam_streak', type_='unique')
    op.create_index('uq_gam_streak_uc', 'gam_streak', ['user_id', 'child_id'], unique=True)
    op.drop_constraint('uq_gam_points_ledger_ucdr', 'gam_points_ledger', type_='unique')
    op.create_index('uq_gam_points_ledger_ucdr', 'gam_points_ledger', ['user_id', 'child_id', 'date', 'reason'], unique=True)
    op.create_index('ix_gam_points_ledger_ucd', 'gam_points_ledger', ['user_id', 'child_id', 'date'], unique=False)
    op.alter_column('gam_points_ledger', 'reason',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_constraint('uq_gam_daily_score_ucd', 'gam_daily_score', type_='unique')
    op.create_index('uq_gam_daily_score_ucd', 'gam_daily_score', ['user_id', 'child_id', 'date'], unique=True)
    op.create_table_comment(
        'children',
        'Child profiles linked to users',
        existing_comment=None,
        schema=None
    )
    op.create_index('idx_children_user_id', 'children', ['user_id'], unique=False)
    op.alter_column('children', 'dietary_restrictions',
               existing_type=postgresql.ARRAY(sa.String()),
               type_=postgresql.ARRAY(sa.TEXT()),
               existing_nullable=True)
    op.alter_column('children', 'allergies',
               existing_type=postgresql.ARRAY(sa.String()),
               type_=postgresql.ARRAY(sa.TEXT()),
               existing_nullable=True)
    op.create_table_comment(
        'chat_sessions',
        'AI chat assistant sessions',
        existing_comment=None,
        schema=None
    )
    op.create_index('idx_chat_sessions_user_id', 'chat_sessions', ['user_id'], unique=False)
    op.create_index('idx_chat_sessions_context_data_gin', 'chat_sessions', ['context_data'], unique=False, postgresql_using='gin')
    op.add_column('chat_messages', sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.create_index('idx_chat_messages_session_id', 'chat_messages', ['session_id'], unique=False)
    op.create_index('idx_chat_messages_metadata_gin', 'chat_messages', ['metadata'], unique=False, postgresql_using='gin')
    op.drop_column('chat_messages', 'message_metadata')
    op.create_table_comment(
        'caregiver_links',
        'Multi-user access to child profiles (premium)',
        existing_comment=None,
        schema=None
    )
    op.create_index('idx_caregiver_links_permissions_gin', 'caregiver_links', ['permissions'], unique=False, postgresql_using='gin')
    op.create_index('idx_caregiver_links_child_id', 'caregiver_links', ['child_id'], unique=False)
    op.create_index('idx_caregiver_links_caregiver_user_id', 'caregiver_links', ['caregiver_user_id'], unique=False)
    op.create_unique_constraint('caregiver_links_child_id_caregiver_user_id_key', 'caregiver_links', ['child_id', 'caregiver_user_id'])
    op.alter_column('badges', 'badge_type',
               existing_type=sa.Enum('STREAK', 'MILESTONE', 'ACHIEVEMENT', 'SOCIAL', name='badgetype'),
               type_=postgresql.ENUM('streak', 'milestone', 'achievement', 'social', name='badge_type'),
               existing_nullable=False)
    op.alter_column('badges', 'description',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    # ### end Alembic commands ###
